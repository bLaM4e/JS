'user strict'

// Ответ: undefined
// Где бы мы не объявили переменную с помощью var, при загрузке HTML страницы это объявление зафиксирутеся в первую очередь
// и переменная "а" попадет в window. Поэтому в условие if всегда будет false и сама переменная навесегда останется undefined

// if (!("a" in window)) {
//     var a = 1;
// }
// alert(a);


// Ответ: ошибка
// При такой записи функцию "a" можно вызывать только в самой себе, поэтому код выдаст ошибку

// var b = function a(x) {
//     x && a(--x);
// };
// alert(a);


//Сначала ответил не правильно - undefined, браузер показал саму фун-ю.
//Не уверен что правильно понял.
//  Сначала у нас "а"-фун-я, потом мы через var объявляем "a", но ничего не присваиваем, потому у нас "а" по прежнему
//  остается функцией, она и отображается при выводе.

// function a(x) {
//     return x * 2;
// }
// var a;
// alert(a);


// Ответ: 10
// Мы тут просто выводим третий аргумент

// function b(x, y, a) {
//     arguments[2] = 10;
//     alert(a);
// }
// b(1, 2, 3);


// Ответ: window 
// Ответил правильно, но не до конца уверен верна ли моя логика. 
// Метод call вызывает фун-ю с указанным значенимем, а указано null, т.е. как бы вызов фун-ии происходит с ни чем.
// Поэтому во внимание и берется this, который указан в самой фун-ии, а он указывает на window.
// Я так понимаю это что-то типа замыкания.

function a() {
    alert(this);
}
a.call(null);
